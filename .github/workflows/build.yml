name: Image and CodeDeploy
on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  actions: read

jobs:
  
  build:
    defaults:
      run:
        working-directory: ./app
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.push.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "${{ secrets.ROLE_ARN }}"
          role-session-name: build-image
          aws-region: "${{ vars.REGION }}"

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        run: |
            docker buildx build --platform linux/amd64 --provenance false --no-cache --load -t "${{ vars.ECR_URI }}:latest" .

      - name: Scan image
        uses: aquasecurity/trivy-action@0.19.0
        with:
          image-ref: "${{ vars.ECR_URI }}:latest"
          format: "table"
          severity: "CRITICAL,HIGH"
          exit-code: 0
          
      - name: Push image
        id: push
        run: |
          docker push ${{ vars.ECR_URI }}:latest
          echo "image=${{ vars.ECR_URI }}:latest" >> $GITHUB_OUTPUT


  deploy:
    outputs:
      task_definition: ${{ steps.update-task-def.task-definition }}
    needs: build
    runs-on: ubuntu-latest
    env: 
      container_port: 8080
      container_name: ecs-v2
      cluster: ecs-v2-cluster
      service: ecs-v2-service
      codedeploy_application: ecs-v2
      codedeploy_deployment_group: ecs-deployment-group
      ecs_task_def_name: ecs-v2-task        
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: "${{ secrets.ROLE_ARN }}"
        role-session-name: codeploy
        aws-region: "${{ vars.REGION }}"
    
    - name: Task definition download
      id: download-task-def
      run: |
        aws ecs describe-task-definition --task-definition $ecs_task_def_name --query taskDefinition > ./task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: update-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.container_name }}
        image: ${{ needs.build.outputs.image }}
    
    - name: Set appspec.json values
      id: set-appspec-values
      run: |
        mkdir -p ./.aws
        cat > ./.aws/appspec.json <<EOF
        {
          "version": 1,
          "Resources": [
            {
              "TargetService": {
                "Type": "AWS::ECS::Service",
                "Properties": {
                  "TaskDefinition": "task-definition.json",
                  "LoadBalancerInfo": {
                    "ContainerName": "$container_name",
                    "ContainerPort": $container_port
                  }
                }
              }
            }
          ]
        }
        EOF

    - name: ECS task deployment using CodeDeploy
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      env:
        ACTIONS_STEP_DEBUG: true
      with:
        task-definition: ${{ steps.update-task-def.outputs.task-definition }}
        service: ${{ env.service }}
        cluster: ${{ env.cluster }}
        wait-for-service-stability: true
        codedeploy-appspec: ./.aws/appspec.json
        codedeploy-application: ${{ env.codedeploy_application }}
        codedeploy-deployment-group: ${{ env.codedeploy_deployment_group }}